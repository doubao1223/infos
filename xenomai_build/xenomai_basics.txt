
2019年 1月30日 星期三 14时34分35秒 CST


dmesg | grep xenomai
=>
Kernel command line: BOOT_IMAGE=/boot/vmlinuz-3.14.17-xenomai-2.6.4 root=UUID=3616b15e-9905-4f62-b2a8-52f1e6fd4f4e ro crashkernel=384M-2G:64M,2G-:128M quite splash
usb usb1: Manufacturer: Linux 3.14.17-xenomai-2.6.4 ehci_hcd
usb usb2: Manufacturer: Linux 3.14.17-xenomai-2.6.4 uhci_hcd

dmesg | grep Xenomai
=>
I-pipe: head domain Xenomai registered.
Xenomai: hal/i386 started. 
Xenomai: scheduling class idle registered.
Xenomai: scheduling class rt registerd.
Xenomai: real-time nucleus v2.6.4 (Jumpin' Out) loaded.
Xenomai: debug mode enabled.
Xenomai: starting native API services.
Xenomai: starting POSIX services.
Xenomai: starting RTDM services.

== xenomai arch

   		    Cobalt kernel				Linux Kernel
上层任务	RT-Tasks					Linux(作为一个 task)
            				   			scheduler
            skin(posix/alchemy)
			
			scheduler
			
Adeos		HAL
			ipipe
   
			Hardware

避免了Linux因为庞大的架构而影响处理 real-time 的时间。

    => real-time API
    => Optimistic interrupt protection 机制
	   	 作用：减少 changing the interrupt mask。一般的机制在每次进入
		   critical section时，都要interrupt mask, 而Optimistic
		   interrupt protection可以不用。
		 
	=> Adeos/iPipe
		 (1) adeos feature
		      
		 (2) event pipeline
		 	   能过pipeline的方式，将不同domain的
				 interrupt或者system call往上丢.
		 (3) optimistic interrupt protection
		 	   有某一domain的多个interrupt正在处理，这时如果
		 	     同domain的interrupt进来，将它置 pending 状态，等到所有pending
				   状态的interrupts完成时，才会处理下个domain.
				 更高优先权domain的interrupt进来，会preempt较低优先权domain的
				   interrupt.
			   
	    处理irq 与 high resolution timer
		ipipe的工作很简单，设定timer并将 interrupt 往上丢。

== xenomai
   1 xenomaiE的实时任务调度
   方式一： Colbat( 专门的模块来处理 实时性 )
        提供的基础设施
		=> 专门的实时模块 Cobalt 来处理 all time-critical activities
	        如：handling interrupts, scheduling real-time threads
		=> Cobalt core has higher priority over the native kernel activities.
		=> 提供 RTOS APIs 接口 (包括
		   	*	libcobalt (xenomai实现的 POSIX 1003.1c services的一个子集
				　　　　　　和 扩展 (extensions) )
	    应用的调用过程
		   Application					;; top
		=> non-POSIX real-time APIs    
		   copperplate interface
		   libcoblat
		=> Cobalt
				
   方式二： Mercury ( 依赖Linux内核的 实时性能力 )
   	    => enable the PREEMPT-RT extension OF Linux
		     ( 提供 real-time services )
			 ( 并不是强制的， 和 responsiveness影应能力,
			   				  	maximum jitter最抖动有关 )
								
		=> non-POSIX RTOS APIs
		     emulated over the native threading library
			 (preferably NPTL, but
			 	also supports linuxthreads for legacy setups)
				
	    应用的调用过程
		   Application					;; top
		=> non-POSIX real-time APIs    
		   copperplate interface
		   Glibc
		=> native RTDM
			 
   2 xenomai的实时任务切换

   3 context switch 消耗是多少？
   	 	其中多核是怎么体现的


   4 普通 Linux 任务能否放到一个核上？


