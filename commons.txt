

// 2019年 6月15日 星期六 11时14分06秒 CST

调度
    任务数，CPU数
    调度策略
    
    实时系统中的调度

内核态 用户态
    特征级别
    用户态 -> 系统调用接口 -> 内核态
    中断内核态

进程 和 线程

     进程 资源分配的最小单位
     线程 调度的最小单位

     从Linux kernel来看，进程和线程是没有区别的。

     可以用命令看到线程。

     多进程：
         http server, fork出子进程，
         不同进程之间的数据是隔离的。
         
     多线程：
         共享部分
         线程栈

         一个线程，崩溃了，所在的进程崩溃了。其他线程就不能使用了。

     双核四线程
     双核不是四线程的区别
     
     父进程 fork 子进程。父进程需要负责子进程的什么东西？

// 2019年 6月15日 星期六 11时53分40秒 CST

(gdb) info threads
查看进程里的线程数


线程的创建
    pthread_create
    
    c++ std thread

线程模型
   1比1的线程模型
   M:1
      M个用户态的线程
      1个内核态的线程

      个阻塞，其他都阻塞。

   协程
      用户态线程的切换发生在用户态
      切换简单, 快速。
    
   M:N 模型
      结合上述两者的优势, 效率更高。
      IPC机制

      NRPC

      核心比较多的， 用 M:N 比较多的。

进程之间没法共享数据。
     IPC机制 (一般的系统上都会提供一套 IPC 机制)
             消息传递
                管道(可以看成特殊的文件)， 管道通信机制
                    匿名管道
                      子进程继承了父进程的数据.
                      文件描述符
                    命名管道 FIFO
                      mkfifo
                        pipewrite.cpp
                        piperead.cpp
                    都是把文件当成一个文件。
                消息队列
                    POSIX提供的API
                    mq_writer.cpp
                    mq_reader.cp
                    
                同步（用在线程间多一些)
                    为什么要同步？
                    
                    多个线程间的执行顺序不确定!
                    同步技术:
                        MUTEX 互斥锁                应用比较多
                          互斥锁的接口

                          读锁, 不能写。
                          写锁， 不能读也不能写.
                        Spin Lock （自旋锁)
                        条件量                      应用比较多
                        信号量
                           匿名信息量
                           有名信号量
                        共享内存(两个进程共享同一块内存)
                            速度快、效率高。
                            举例：如果只让一个人写。
                                用信号量标名这个资源不能写。
                                mmap, Linux机制，从堆上拿一块内存。
                                同步就是只让一个人操作。
    异构计算机，互操作。
        rpc

注：多线程编程一定要注意同路步。

信号

解决线程调度顺序的技术。

