
1. 单一职责原则 Single Responsibility Principle
Tom Demaro (1940~ ) 和Meilir Page-Jones的著作中提到，“内聚性(cohesion), 并定义为：一个模块的组成元素之间的功能相关性。” Robert C. Martin 把稍微改变了一下内聚性的含义，把内聚性和引起一个模块(或者类)改变的作用力结合起来。

就一个类而言，指的是应该仅有一个引起它变化的原因。

把职责定义为“变化的原因”，如果你能想到多于一个动机去改变一个类，那么这个类就具有多于一个的职责。

Tom Demaro

1986 recipient of the Warnier Prize for "lifetime contribution to the filed of computing",

1999 recipient of the Stevens Award for "contribution to the methods of software development".

2. 开放-封闭原则 Open-Closed Principle
软件实体应该是可以扩展的，但是不可修改的。 --Bertrand Meyer, Researcher of Programming Languages. 1950 French

Ivar Jacobson说过，“任何系统在其生命同期中都会发生变化。如果我们期望开发出的系统不会在第1版后就被抛弃，就必须牢牢地记住这一点。”

如果程度序中的一处改动会产生连锁反应，导致一系列相关模块的改动，那么需要优化设计。

3. 里氏替换原则 Liskov Substitution Principle
Barbara Liskov (1939~ ) 在1988年，写道，

“若对每个类型S的对象o1, 都存在一个类型T的对象o2, 使得

在所有针对T编写的程序P中，用o1替换o2后，程序P行为功能不变，则S是T的子类型。”

一些参考结论：

a. 对于LSP的违反(子类不能替换基类)也潜在地违反了OCP。
b. 如果新派生类的创建会导致我们改变基类，常常意味着设计是有缺陷的。当然也违反了OCP。
c. is-a 关系是 就行为方式而言的。对象的行为方式才是软件直真正所关注的问题。
d. 合理假设行为方式 ==> Design By Contract (基于契约设计), DBC
e. 使用DBC, 类的编写者显式地规定针对该类的契约。客户代码的编写者可以通过该契约获悉可以依赖的行为方式。
f. 契约是通过 每个方法声明的 preconditions 和 postconditions 来指定的。要使一个方法得以执行，preconditions 必需为真。执行完毕后，该方法要保证后置条件为真。
g. 在重新声明派生类中的例程(routine)时，只能使用相等或者更弱的前置条件来代替原始的前置条件，只能使用相等或者更强的后置条件来替换原来的后置条件。 也就是说派生类的行为方式和输出不能违反基类已经确立的任何限制。
h. 提取公共部分是一个设计工具。最好在代码不是很多时应用。
I. 派生类完成的功能少于其基类时，通常是不能替换其基类的。因此就违反了LSP。
J. 如果派生类中存在 退化的函数，就表示违反了LSP，值得注意一下。
K. 在派生类的方法中添加了抛出异常，如果基类的使用者不期望这些异常，那么把它们添加到派生类的方法中就会导致不可替换性。

总结：
a. OCP是OOD中很多说法的核心。如果OCP应用得有效，应用程序就会具有更多的可维护性、可重用性以及健壮性。
b. LSP是使 OCP 成为可能的主要原则之一。正是因为可以用子类型替换基类，使得使用基类类型的模块在无需改的情况下就可以扩展。
c. 这种可替换性必须是 开发人员 可以隐式依赖的东西。
d. 如果没有显式地强制基类类型的契约，那么代码就必须良好地并且明显地表达出这一点。
e. Is a的含意过于宽泛，以至于不能作为子类型的定义。子类型的正确定义是“可替换性的",这里的可替换性，可以通过显式或者隐式地的契约来定义。

4. 依赖倒置原则 Dependence Inversion Principle
a. 高层模块不应该依赖低层模块。
高层模块定义好抽象，低层模块去实现抽象。这样高层就不用深入到低层模块。
b. 抽象不应该依赖于细节。细节应该依赖抽象。
“倒置”：依赖关系倒置、接口所有权倒置。

“依赖于抽象”认为所有的依赖关系都应该终止于抽象或者接口。

(1) 任何变量都不应该持有一个【指向具体类】的指针或者引用。 --依赖具体类
(2) 任何类都不应该从【具体类】派生。 --依赖具体类
(3) 任何方法都不应该格覆写它的任何基类中已经实现了的方法。 --

反对意见：
如果一个具体类不太会改变，并且也不会创建其他类似的派生类，那么依赖于它并不会造成损害。

动态多态性，通过抽象类或者接口实现。
静态多态性，通过C++模板实现。

例：
template <typename THERMOMETER, typename HEATER>
class Regulate(THERMOMETER& t, HEATER& h, double minTemp, double maxTemp)
{
for (;;)
{
while (t.Read() > minTemp)
wait(1);
h.Engage();
while (t.Read() < maxTemp)
wait(1);
h.Disengage();
}

解说：
同样实现了 依赖倒置，并且不具有动态多态性的开销(或者说灵活性)。
在C++中，Read、Engaged、Disengaged方法都可以是非虚的。此外，任何声明了这些方法的类都可以作为模板参数使用（作为相应的THERMOMETER和HEATER ）。它们不必从一个公共基类继承。

作为模板，Regulate不依赖于这些函数的任何特定实现。它只是要求替换 HEADER 的类要有一个 Engage 和 一个 Disengage 方法，替换 THERMOMETER 的类要有一个 Read 函数。

因此，这些类必须要实现模板所定义的接口。换名话说，Regulate所使用的类都必须遵从相同的接口约定，并且它们都依赖于这个约定。

静态多态性很好地解除了源代码中的依赖关系，但是它不能解决动态多态性解决的所有问题。模板方法的缺点是：
(1) THERMOMETER和HEATER 的类型不能在运行时更改。
(2) 对于新类型的 THERMOMETER和HEATER 的使用会迫使重新编译和重新部署。所以，除非有非常严格的速度性能要求，否则应该优先使用动态多态性。

如果程序的依赖关系是倒置的，它就是面向对象的设计。如果程序的依赖关系不是倒置的，它就是过程一化的设计。

5. 接口隔离原则，Interface Segregation Principles
不应该强迫用客户依赖于他们不用的方法。

6. 迪米特原则，Law of Demeter(Least Knowledge Principle)
talk only to your immediate friends.

一个软件实体应该尽可能少的与其他实体发生相互作用。

初衷：是降低软件类之间的耦合。
模式：门面模式(Facade), 中介模式(Mediator).
缺陷：在系统里造出大量的小方法。降低了不同模块间的通信效率。
