
2018年12月17日 星期一 18时04分34秒 CST

https://en.wikipedia.org/wiki/Binary_search_tree

==
Binary search tree, BST
也叫 ordered or sorted binary trees.
定义: 是一种特定的容器，是把 数据项 存储到内存的 数据结构。

优势: fast lookup, addition, removal of items.
功能:
      BST是一个基础数据结构, 可以用来构建更抽象的数据结构，如：sets,
      multisets, and associative arrays

      to implement dynamic sets of items, 
      lookup tables that allow finding an item by key.
特点:
    按 key 排序,

    so that lookup and other operations can use the principle of
        binary search: 二分查找原则
        
    when looking for a key in a tree (or a place to insert a new key),
        they traverse the tree from root to leaf, making comparisons
        to keys stored in the nodes of the tree and deciding,
    on the basis of the comparison, to continue searching in the left
        基于 比较                      继续 搜索
        or right subtrees.

    On average, this means that each comparison allows the operations
                                每次 比较
        to skip about half of the tree, so that each lookup, insertion
                减少 一半
        or deletion takes time proportional to the logarithm of the
                          时间花销 log( N )
        number of items stored in the tree.

时间复杂度:
    This is much better than
        the linear time required to find items by key in an (unsorted)
        array,
        
        but slower than the corresponding operations on hash tables.

变体:
    Several variants of the BST have been studied in computer science;
    this article deals primarily with the basic type, making
    references to more advanced types when appropriate.

术语:
    子树：sub-trees
    左子树：left
    右子树：right
     
    the key in each node >= any key stored in the left sub-tree
    the key in each node <= any key stored in the right sub-tree

    in-order traversal

Order realtion:
    a total preorder

操作：
    searching  搜索
    insertion  插入
    deletion   删除
        deleting a node with no children
        deleting a node with one child
        deleting a node with two children (例如: D)
            使用 in-order predecessor node 或者 in-order successor node 替换.
                 如:E，把E的[值] 复抽到D.
            如果E没有child, 删除E.
            如果E有child（右child, 如:F).  Replace E with F at E's parent.
    traversal  遍历
        in-order traversal
            An in-order traversal of a BST will always result in a
            sorted list of node items.
            
        pre-order traversal
        post-order traversal
            这两个遍历对 BST 都没什么用途。
    verification  确认（一棵树是不是 BST)
        

