
== xenomai
   1 xenomaiE的实时任务调度
   方式一： Colbat( 专门的模块来处理 实时性 )
        提供的基础设施
		=> 专门的实时模块 Cobalt 来处理 all time-critical activities
	        如：handling interrupts, scheduling real-time threads
		=> Cobalt core has higher priority over the native kernel activities.
		=> 提供 RTOS APIs 接口 (包括
		   	*	libcobalt (xenomai实现的 POSIX 1003.1c services的一个子集
				　　　　　　和 扩展 (extensions) )
	    应用的调用过程
		   Application					;; top
		=> non-POSIX real-time APIs    
		   copperplate interface
		   libcoblat
		=> Cobalt
				
   方式二： Mercury ( 依赖Linux内核的 实时性能力 )
   	    => enable the PREEMPT-RT extension OF Linux
		     ( 提供 real-time services )
			 ( 并不是强制的， 和 responsiveness影应能力,
			   				  	maximum jitter最抖动有关 )
								
		=> non-POSIX RTOS APIs
		     emulated over the native threading library
			 (preferably NPTL, but
			 	also supports linuxthreads for legacy setups)
				
	    应用的调用过程
		   Application					;; top
		=> non-POSIX real-time APIs    
		   copperplate interface
		   Glibc
		=> native RTDM
			 
   2 xenomai的实时任务切换

   3 context switch 消耗是多少？
   	 	其中多核是怎么体现的


   4 普通 Linux 任务能否放到一个核上？
